/*
	Title: Vertical-rhythmic 0.2, Aur√©lien Delogu (dev@dreamysource.fr)

	License: LGPL v3 (http://www.gnu.org/licenses/lgpl.txt)

	Description:
		Compass proposes px-based vertical-rhythm support, this behavior is a habit of many developers and designers to build identical websites across browsers and to be compatible with IE6. Since it breaks accessibility (users can't change the global font size anymore in their browser preferences), we tried to provide an em-based vertical-rhythm solution.

		Managing many levels of line-height childs is painful and sites generally just use only one depth level, so we don't support it. If you want to have a <p> within a <div> within another <div> (so, we have 3 depths here) and all have their own line-height, you must take your calculator and enjoy.

		There's two approach to rhythm your site: you can use the both rhythm functions which are very flexibles or you can include the font-size, margin, padding or border properties which are more assisted. In all cases, you must set $base-font-size and $base-line-height if you don't want a based rhythm of 1em/1.5em (generally 16px/24px). After that, you just have to includ vertical-rhythmic to your stylesheet and it initialize body rhythm for you.
*/

/* Variable: $base-font-size
   The base font-size which will be applied to the body (default: 1em). */
$base-font-size:	1em !default;

/* Variable: $base-line-height
   The base line-height which will be applied to the body (default: 1.5em). */
$base-line-height:	1.5em !default;

/* Initialize the rhythm */
body{
	font-size:$base-font-size;
	line-height:$base-line-height;
}

/*
	Function: rhythm

	Sets a rhythm

	Parameters:	$lines		- Number of whitespace lines (default: 1).
							  You can specify "auto" value and it will generate a proportional value from the base line-height (especially useful when you want to set a good line-height value).
				$font-size	- The font size (in em)

*/
@function rhythm($lines:1,$font-size:1em){
	@if $lines == auto {
		$lines:ceil($font-size / $base-line-height);
	}
	@return $base-line-height / $font-size * $lines * 1em;
}

/*
	Function: px-rhythm

	Sets a rhythm based on pixels

	Parameters:	$width		- The width of the rhythm (without px unit)
				$font-size	- The font size (in em)
*/
@function px-rhythm($width:1,$font-size:1em){
	@if unit($width) == px {
		$width:$width / 1px;
	}
	@return $width * 0.0625 / $base-font-size / $font-size * 1em * 1em * 1em;
}

/*
	Mixin: font-size

	Sets a new font-size and automatically adapt the line-height.

	Parameters:	$font-size	- The font size (in em)
				$lines		- Number of whitespace lines for the line-height
							  (keep base line proportions by default)
*/
@mixin font-size($font-size,$lines:ceil($font-size / $base-line-height)){
	font-size:$font-size;
	line-height:rhythm($lines,$font-size);
}

/*
	Mixin: margin

	Adds a margin around a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin($lines:1,$font-size:1em,$border-width:0){
	margin:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: margin-top

	Adds a top margin to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin-top($lines:1,$font-size:1em,$border-width:0){
	margin-top:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: margin-right

	Adds a right margin to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin-right($lines:1,$font-size:1em,$border-width:0){
	margin-right:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: margin-bottom

	Adds a bottom margin to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin-bottom($lines:1,$font-size:1em,$border-width:0){
	margin-bottom:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: margin-left

	Adds a left margin to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin-left($lines:1,$font-size:1em,$border-width:0){
	margin-left:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: padding

	Adds a padding to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding($lines:1,$font-size:1em,$border-width:0){
	padding:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: padding-top

	Adds a top padding to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding-top($lines:1,$font-size:1em,$border-width:0){
	padding-top:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: padding-right

	Adds a right padding to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding-right($lines:1,$font-size:1em,$border-width:0){
	padding-right:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: padding-bottom

	Adds a bottom padding to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding-bottom($lines:1,$font-size:1em,$border-width:0){
	padding-bottom:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: padding-left

	Adds a left padding to a box

	Parameters:	$lines			- Number of whitespace lines (default: 1)
				$font-size		- The actual font-size, in em, to calculate with (default: 1em)
				$border-width	- The width of additionnal borders around the box.
								  This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding-left($lines:1,$font-size:1em,$border-width:0){
	padding-left:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Mixin: border

	Adds a border around a box

	Parameters:	$color		- The color
				$font-size	- The font-size of the box (in em)
				$width		- The width
							  It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
				$type		- The type of the outline
*/
@mixin border($color,$font-size:1em,$width:1,$type:solid){
	border:px-rhythm($width,$font-size) $type $color;
}

/*
	Mixin: border-top

	Adds a top border to a box

	Parameters:	$color		- The color
				$font-size	- The font-size of the box (in em)
				$width		- The width
							  It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
				$type		- The type of the outline
*/
@mixin border-top($color,$font-size:1em,$width:1,$type:solid){
	border-top:px-rhythm($width,$font-size) $type $color;
}

/*
	Mixin: border-right

	Adds a right border to a box

	Parameters:	$color		- The color
				$font-size	- The font-size of the box (in em)
				$width		- The width
							  It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
				$type		- The type of the outline
*/
@mixin border-right($color,$font-size:1em,$width:1,$type:solid){
	border-right:px-rhythm($width,$font-size) $type $color;
}

/*
	Mixin: border-bottom

	Adds a bottom border to a box

	Parameters:	$color		- The color
				$font-size	- The font-size of the box (in em)
				$width		- The width
							  It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
				$type		- The type of the outline
*/
@mixin border-bottom($color,$font-size:1em,$width:1,$type:solid){
	border-bottom:px-rhythm($width,$font-size) $type $color;
}

/*
	Mixin: border-left

	Adds a left border to a box

	Parameters:	$color		- The color
				$font-size	- The font-size of the box (in em)
				$width		- The width
							  It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
				$type		- The type of the outline
*/
@mixin border-left($color,$font-size:1em,$width:1,$type:solid){
	border-left:px-rhythm($width,$font-size) $type $color;
}

/*
	Mixin: outline

	Adds an outline around a box

	Parameters:	$color		- The color
				$font-size	- The font-size of the box (in em)
				$width		- The width
							  It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
				$type		- The type of the outline
*/
@mixin outline($color,$font-size:1em,$width:1,$type:solid){
	outline:px-rhythm($width,$font-size) $type $color;
}