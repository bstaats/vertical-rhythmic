/*
	Title:		Vertical-rhythmic 0.2
	Author:	    Aur√©lien Delogu (dev@dreamysource.fr)
	License:	LGPL v3 (http://www.gnu.org/licenses/lgpl.txt)
*/

// The base font-size which will be applied to the body (default: 1em)
$base-font-size:	1em !default;

// The base line-height which will be applied to the body (default: 1.5em)
$base-line-height:	1.5em !default;

// Initialize the rhythm
body{
	font-size:$base-font-size;
	line-height:$base-line-height;
}

/*
	Returns a rhythm
        $lines		: Number of whitespace lines (default: 1).
				      You can specify "auto" value and it will generate a proportional value from the base line-height (especially useful when you want to set a good line-height value).
	    $font-size	: The font size (in em)
*/
@function rhythm($lines:1,$font-size:1em){
	@if $lines == auto {
		$lines:ceil($font-size / $base-line-height);
	}
	@return $base-line-height / $font-size * $lines * 1em;
}

/*
	Returns a rhythm from pixel unit
	    $width		: The width of the rhythm (without px unit)
	    $font-size	: The font size (in em)
*/
@function px-rhythm($width:1,$font-size:1em){
	@if unit($width) == px {
		$width:$width / 1px;
	}
	@return $width * 0.0625 / $base-font-size / $font-size * 1em * 1em * 1em;
}

/*
	Sets a new font-size and automatically adapt the line-height.
        $font-size	: The font size (in em)
	    $lines		: Number of whitespace lines for the line-height
				      (keep base line proportions by default)
*/
@mixin font-size($font-size,$lines:ceil($font-size / $base-line-height)){
	font-size:$font-size;
	line-height:rhythm($lines,$font-size);
}

/*
	Adds a margin around a box
	    $lines			: Number of whitespace lines (default: 1)
        $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin($lines:1,$font-size:1em,$border-width:0){
	margin:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a top margin to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin-top($lines:1,$font-size:1em,$border-width:0){
	margin-top:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a right margin to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin-right($lines:1,$font-size:1em,$border-width:0){
	margin-right:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a bottom margin to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin-bottom($lines:1,$font-size:1em,$border-width:0){
	margin-bottom:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a left margin to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin margin-left($lines:1,$font-size:1em,$border-width:0){
	margin-left:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a padding to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding($lines:1,$font-size:1em,$border-width:0){
	padding:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a top padding to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding-top($lines:1,$font-size:1em,$border-width:0){
	padding-top:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a right padding to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding-right($lines:1,$font-size:1em,$border-width:0){
	padding-right:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a bottom padding to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding-bottom($lines:1,$font-size:1em,$border-width:0){
	padding-bottom:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a left padding to a box
	    $lines			: Number of whitespace lines (default: 1)
	    $font-size		: The actual font-size, in em, to calculate with (default: 1em)
	    $border-width	: The width of additionnal borders around the box.
					      This is useful to substract those borders from the whitespace to not break the rhythm.
*/
@mixin padding-left($lines:1,$font-size:1em,$border-width:0){
	padding-left:rhythm($lines,$font-size) - px-rhythm($border-width,$font-size);
}

/*
	Adds a border around a box
	    $color		: The color
	    $font-size	: The font-size of the box (in em)
	    $width		: The width
				      It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
	    $type		: The type of the outline
*/
@mixin border($color,$font-size:1em,$width:1,$type:solid){
	border:px-rhythm($width,$font-size) $type $color;
}

/*
	Adds a top border to a box
	    $color		: The color
	    $font-size	: The font-size of the box (in em)
	    $width		: The width
				      It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
	    $type		: The type of the outline
*/
@mixin border-top($color,$font-size:1em,$width:1,$type:solid){
	border-top:px-rhythm($width,$font-size) $type $color;
}

/*
	Adds a right border to a box
	    $color		: The color
	    $font-size	: The font-size of the box (in em)
	    $width		: The width
				      It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
	    $type		: The type of the outline
*/
@mixin border-right($color,$font-size:1em,$width:1,$type:solid){
	border-right:px-rhythm($width,$font-size) $type $color;
}

/*
	Adds a bottom border to a box
	    $color		: The color
	    $font-size	: The font-size of the box (in em)
	    $width		: The width
				      It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
	    $type		: The type of the outline
*/
@mixin border-bottom($color,$font-size:1em,$width:1,$type:solid){
	border-bottom:px-rhythm($width,$font-size) $type $color;
}

/*
	Adds a left border to a box
	    $color		: The color
	    $font-size	: The font-size of the box (in em)
	    $width		: The width
				      It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
	    $type		: The type of the outline
*/
@mixin border-left($color,$font-size:1em,$width:1,$type:solid){
	border-left:px-rhythm($width,$font-size) $type $color;
}

/*
	Adds an outline around a box
	    $color		: The color
	    $font-size	: The font-size of the box (in em)
	    $width		: The width
				      It quite equals to pixels but it depends on the base font-size of the browser, so it take no units
	    $type		: The type of the outline
*/
@mixin outline($color,$font-size:1em,$width:1,$type:solid){
	outline:px-rhythm($width,$font-size) $type $color;
}
